<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Injectikus</name>
    </assembly>
    <members>
        <member name="T:Injectikus.InjectArrayAttribute">
            <summary>
            Аттрибут, указывающий на то, что в указанный параметр необходимо внедридить массив экземпляров.
            </summary>
        </member>
        <member name="T:Injectikus.InjectHereAttribute">
            <summary>
            Атрибут, указывающий на то, что этот член класс необходимо использовать для внедрения зависимостей
            </summary>
        </member>
        <member name="T:Injectikus.DependencyInjectionMethod">
            <summary>
            Способ инициализации экземпляра класса
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.Auto">
            <summary>
            Определить способ автоматически.
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.ConstructorParametersInjection">
            <summary>
            Внедрение зависимостей через параметры конструктора.
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.MethodParametersInjection">
            <summary>
            Вызов указанного метода и внедрение зависимостей через его параметры.
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.PropertiesAndSettersInjection">
            <summary>
            Внедрение зависимостей через помеченные аттрибутом <see cref="T:Injectikus.InjectHereAttribute"/> методы и свойства
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.WidestConstructorParametersInjection">
            <summary>
            Выбор конструктора с максимальным количеством параметров, типы которых удасться разрешить.
            И внедрение зависимостей через эти параметры.
            </summary>
        </member>
        <member name="F:Injectikus.DependencyInjectionMethod.DefaultConstructorWithoutInjection">
            <summary>
            Вызов конструктора по-умолчанию, без внедрения зависимостей.
            </summary>
        </member>
        <member name="T:Injectikus.InjectionMethodAttribute">
            <summary>
            Аттрибут, указывающий способ внедрения зависимостей для класса.
            </summary>
        </member>
        <member name="P:Injectikus.InjectionMethodAttribute.DependencyInjectionMethod">
            <summary>
            Указанный способ внедрения зависимостей
            </summary>
        </member>
        <member name="M:Injectikus.InjectionMethodAttribute.#ctor(Injectikus.DependencyInjectionMethod)">
            <summary>
            Создать аттрибут для указанного метода внедрения зависимостей <paramref name="method"/>
            </summary>
            <param name="method">Указанный способ внедрения зависимостей</param>
        </member>
        <member name="T:Injectikus.BaseBinderFactory">
            <summary>
            Базовый класс для фабрик объектов привязки.
            Единственная цель - задать интерфейс на конструктор
            </summary>
        </member>
        <member name="F:Injectikus.BaseBinderFactory.container">
            <summary>
            Контенйнер, в котором выполняется привязка
            </summary>
        </member>
        <member name="M:Injectikus.BaseBinderFactory.#ctor(Injectikus.IContainer)">
            <summary>
            Конструктор фабрики объектов привязки к контейнеру <paramref name="container"/>
            </summary>
            <param name="container">Контенйнер, в котором выполняется привязка</param>
        </member>
        <member name="M:Injectikus.BaseBinderFactory.GetBinder(System.Type)">
            <summary>
            Получить объект связывание для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого нужно получить объект связывания</param>
            <returns>Объект связывание для типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.BaseBinderFactory.GetBinder``1">
            <summary>
            Получить объект связывание для типа <typeparamref name="TargetT"/>
            </summary>
            <typeparam name="TargetT">Тип, для которого нужно получить объект связывания</typeparam>
            <returns>Объект связывание для типа <typeparamref name="TargetT"/></returns>
        </member>
        <member name="T:Injectikus.BaseContainer">
            <summary>
            Базовый потокобезопасный контейнер внедрения зависимостей.
            </summary>
        </member>
        <member name="F:Injectikus.BaseContainer.providers">
            <summary>
            Словарь тип - список поставщиков
            </summary>
        </member>
        <member name="P:Injectikus.BaseContainer.BinderFactory">
            <value>
            Фабрика объектов связывания
            <see cref="T:Injectikus.IBinderFactory"/>
            <seealso cref="T:Injectikus.IBinder"/>
            </value>
        </member>
        <member name="M:Injectikus.BaseContainer.#ctor(Injectikus.IBinderFactory)">
            <summary>
            Создаёт новый контейнер внедрения зависимостей c указанной в <paramref name="binderFactory"/> фабрикой объектов связывания
            </summary>
            <param name="binderFactory"/>
        </member>
        <member name="M:Injectikus.BaseContainer.InitContainer">
            <summary>
            Базовая инициализация контейнера
            </summary>
        </member>
        <member name="M:Injectikus.BaseContainer.Get``1">
            <summary>
            Получить экземпляр типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Тип экземпляра</typeparam>
            <returns>Экземпляр типа <typeparamref name="TargetType"/></returns>
        </member>
        <member name="M:Injectikus.BaseContainer.TryGet``1(``0@)">
            <summary>
            Попробовать получить экземпляр типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Требуемый тип</typeparam>
            <param name="obj">Переменная, через которую осуществляется возврат экземпляра</param>
            <returns><c>true</c> если удалось получить объект, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.BaseContainer.TryGet(System.Type,System.Object@)">
            <summary>
            Попробовать получить экземпляр типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Требуемый тип</param>
            <param name="obj">Переменная, через которую осуществляется возврат экземпляра</param>
            <returns><c>true</c> если удалось получить объект, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.BaseContainer.Get(System.Type)">
            <summary>
            Получить экземпляр типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Тип экземпляра</param>
            <returns>Экземпляр типа <paramref name="type"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.GetAll``1">
            <summary>
            Получить массив всех экземпляров типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Требуемый тип</typeparam>
            <returns>Массив <typeparamref name="TargetType"/>[]. 
            Если к контейнере остуствуют поставщики объектов для типа <typeparamref name="TargetType"/>,
            то будет возращен массив длины 0</returns>
        </member>
        <member name="M:Injectikus.BaseContainer.GetAll(System.Type)">
            <summary>
            Получить массив всех экземпляров типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Требуемый тип</param>
            <returns>Массив object[] с элементами типа <paramref name="type"/>. 
            Если к контейнере остуствуют поставщики объектов для типа <paramref name="type"/>,
            то будет возращен массив длины 0</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.BindProvider(System.Type,Injectikus.IObjectProvider)">
            <summary>
            Создаёт связь между типом <paramref name="type"/> и поставщиком объектов <paramref name="provider"/>
            </summary>
            <param name="type">Тип, с которым следует связать поставщика</param>
            <param name="provider">Поставщик объектов</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.BindProvider``1(Injectikus.IObjectProvider)">
            <summary>
            Создаёт связь между типом <typeparamref name="TargetType"/> и поставщиком объектов <paramref name="provider"/>
            </summary>
            <typeparam name="TargetType">Тип, с которым следует связать поставщика</typeparam>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="M:Injectikus.BaseContainer.UnbindProvider(System.Type,Injectikus.IObjectProvider)">
            <summary>
            Удаляет связь между типом <paramref name="type"/> и поставщиком <paramref name="provider"/>
            </summary>
            <param name="type">Тип</param>
            <param name="provider">Ассоцированный с типом <paramref name="type"/> поставщик</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.UnbindProvider``1(Injectikus.IObjectProvider)">
            <summary>
            Удаляет связь между типом <typeparamref name="TargetType"/> и поставщиком <paramref name="provider"/>
            </summary>
            <typeparam name="TargetType">Тип</typeparam>
            <param name="provider">Ассоцированный с типом <typeparamref name="TargetType"/> поставщик</param>
        </member>
        <member name="M:Injectikus.BaseContainer.CanResolve``1(System.Boolean)">
            <summary>
            Проверяет, может ли контейнер разрешить зависимость <typeparamref name="TargetType"/>
            По умолчанию для любого типа массива результат true, если не задано <paramref name="strictArrayCheck"/>
            </summary>
            <typeparam name="TargetType">Тип, для которого выполняется проверка</typeparam>
            <param name="strictArrayCheck">Выполнять ли строгую проверку для массивов</param>
            <returns><c>true</c> если поставщик для типа <typeparamref name="TargetType"/> присутствует в контейнерею, иначе <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.CanResolve(System.Type,System.Boolean)">
            <summary>
            Проверяет, может ли контейнер разрешить зависимость <paramref name="type"/>. 
            По умолчанию для любого типа массива результат true, если не задано <paramref name="strictArrayCheck"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка</param>
            <param name="strictArrayCheck">Выполнять ли строгую проверку для массивов</param>
            <returns><c>true</c> если поставщик для типа <paramref name="type"/> присутствует в контейнерею, иначе <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Injectikus.BaseContainer.CreateInstance``1">
            <summary>
            Создаёт экземпляр класса <typeparamref name="TargetType"/>, внедряя в него зависимости по одной из доступных стратегий.
            При этом, для создания объекта не используются зарегестрированные провайдеры.
            Основное предназначение данного метода - создание экземпляров класса, не зарегистрированного в контейнере.
            </summary>
            <typeparam name="TargetType">Тип создаваемого экземпляра</typeparam>
            <returns>Экземпляр класса <typeparamref name="TargetType"/></returns>
        </member>
        <member name="M:Injectikus.BaseContainer.CreateInstance(System.Type)">
            <summary>
            Создаёт экземпляр класса <paramref name="type"/>, внедряя в него зависимости по одной из доступных стратегий.
            При этом, для создания объекта не используются зарегестрированные провайдеры.
            Основное предназначение данного метода - создание экземпляров класса, не зарегистрированного в контейнере.
            </summary>
            <param name="type">Тип создаваемого экземпляра</param>
            <returns>Экземпляр класса <paramref name="type"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Injectikus.ContainerExtension">
            <summary>
            Класс с методами расширения для <see cref="T:Injectikus.IContainer"/>
            </summary>
        </member>
        <member name="M:Injectikus.ContainerExtension.Bind(Injectikus.IContainer,System.Type)">
            <summary>
            Начать связывание типа <paramref name="type"/>
            </summary>
            <param name="container">Контейнер, в котором выполняется связывание</param>
            <param name="type">Связываемый тип</param>
            <returns>Объект связывания для типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.ContainerExtension.Bind``1(Injectikus.IContainer)">
            <summary>
            Начать связывание типа <typeparamref name="TargetT"/>
            </summary>
            <param name="container">Контейнер, в котором выполняется связывание</param>
            <typeparam name="TargetT">Связываемый тип</typeparam>
            <returns>Объект связывания для типа <typeparamref name="TargetT"/></returns>
        </member>
        <member name="T:Injectikus.DefaultBinder">
            <summary>
            Базовый объект связывания
            </summary>
        </member>
        <member name="P:Injectikus.DefaultBinder.Type">
            <summary>Базовый тип</summary>
        </member>
        <member name="P:Injectikus.DefaultBinder.Container">
            <summary>
            Контейнер, в котором осуществляется привязка
            </summary>
        </member>
        <member name="P:Injectikus.DefaultBinder.DefaultProviderFactory">
            <summary>
            Фабрика поставщиков объектов по-умолчанию.
            </summary>
        </member>
        <member name="M:Injectikus.DefaultBinder.#ctor(Injectikus.IContainer,Injectikus.IProviderFactory,System.Type)">
            <summary>
            Конструктор объекта связывания
            </summary>
            <param name="container">Контейнер, в котором будет осуществляться связывание</param>
            <param name="factory">Не стандартная фабрика поставщиков</param>
            <param name="type">Базовый тип</param>
        </member>
        <member name="M:Injectikus.DefaultBinder.ToProvider(Injectikus.IObjectProvider)">
            <summary>
            Выполнить привязку произвольного поставщика к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="M:Injectikus.DefaultBinder.ToMethod(System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Выполнить привязку производящего метода к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="factoryMethod">Производящий метод</param>
        </member>
        <member name="M:Injectikus.DefaultBinder.To(System.Type)">
            <summary>
            Выполнить привязку производного типа <paramref name="type"/> к базовому <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="type">Тип к которому осуществляется привязка базового типа</param>
        </member>
        <member name="T:Injectikus.DefaultBinder`1">
            <summary>
            Базовый объект связывания
            <typeparam name="TargetT">Базовый тип, к которому осуществляется привязка</typeparam>
            </summary>
        </member>
        <member name="M:Injectikus.DefaultBinder`1.#ctor(Injectikus.IContainer,Injectikus.IProviderFactory)">
            <summary>
            Конструктор объекта связывания
            </summary>
            <param name="container">Контейнер, в котором будет осуществляться связывание</param>
            <param name="factory">Не стандартная фабрика поставщиков</param>
        </member>
        <member name="M:Injectikus.DefaultBinder`1.To``1">
            <summary>
            Выполнить привязку производного класса <typeparamref name="InstanceT"/> к базовому типу <typeparamref name="TargetT"/>
            </summary>
            <typeparam name="InstanceT">Класс производный от типа <typeparamref name="TargetT"/></typeparam>
        </member>
        <member name="M:Injectikus.DefaultBinder`1.ToMethod``1(System.Func{Injectikus.IContainer,``0})">
            <summary>
            Выполнить привязку производящего метода <paramref name="factoryMethod"/> к базовому типу <typeparamref name="TargetT"/>
            </summary>
            <param name="factoryMethod">Производящий метод, возвращающий объект типа <typeparamref name="InstanceT"/></param>
            <typeparam name="InstanceT">Класс, производный от <typeparamref name="TargetT"/>, объекты которого возвращаются производящим методом</typeparam>
        </member>
        <member name="T:Injectikus.DefaultBinderFactory">
            <summary>
            Фабрика объектов связывания по-умолчанию.
            </summary>
        </member>
        <member name="M:Injectikus.DefaultBinderFactory.#ctor(Injectikus.IContainer)">
            <summary>
            Создаёт стандартную фабрику объектов привязывания для контейнера <paramref name="container"/>
            </summary>
            <param name="container">Контейнер, в котором будет осуществляться связывание</param>
        </member>
        <member name="M:Injectikus.DefaultBinderFactory.GetBinder(System.Type)">
            <summary>
            Получить объект связывание для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого нужно получить объект связывания</param>
            <returns>Объект связывание для типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.DefaultBinderFactory.GetBinder``1">
            <summary>
            Получить объект связывание для типа <typeparamref name="TargetT"/>
            </summary>
            <typeparam name="TargetT">Тип, для которого нужно получить объект связывания</typeparam>
            <returns>Объект связывание для типа <typeparamref name="TargetT"/></returns>
        </member>
        <member name="T:Injectikus.DependencyIsNotResolvableByContainerException">
            <summary>
            Сообщение, уведомляющее о том, что запрошенная зависимость не может быть разрешена контейнером
            </summary>
        </member>
        <member name="P:Injectikus.DependencyIsNotResolvableByContainerException.RequestedType">
            <summary>
            Тип зависимости, которую не удалось разрешить
            </summary>
        </member>
        <member name="M:Injectikus.DependencyIsNotResolvableByContainerException.#ctor(System.Type)">
            <summary>
            Создаёт исключение для неразрешенной зависимости типа <paramref name="requestedType"/>
            </summary>
            <param name="requestedType">Тип зависимости, которую не удалось разрешить</param>
        </member>
        <member name="M:Injectikus.DependencyIsNotResolvableByContainerException.#ctor(System.Type,System.String)">
            <summary>
            Создаёт исключение с сообщение <paramref name="message"/> для неразрешенной зависимости типа <paramref name="requestedType"/>
            </summary>
            <param name="message">Сообщение</param>
            <param name="requestedType">Тип зависимости, которую не удалось разрешить</param>
        </member>
        <member name="T:Injectikus.DIInstanceCreationService">
            <summary>
            Сервис создания экземпляров класса
            </summary>
        </member>
        <member name="F:Injectikus.DIInstanceCreationService.container">
            <summary>
            Контейнер, который разрешает зависимости при создании экземпляра
            </summary>
        </member>
        <member name="F:Injectikus.DIInstanceCreationService.buildersCache">
            <summary>
            Кэш-производителей
            </summary>
        </member>
        <member name="F:Injectikus.DIInstanceCreationService.strategies">
            <summary>
            Стратеги создания экземпляра
            </summary>
        </member>
        <member name="M:Injectikus.DIInstanceCreationService.#ctor(Injectikus.IContainer)">
            <summary>
            Создать сервис-производитель экземпляров
            </summary>
            <param name="container">Контейнер, который разрешает зависимости при создании экземпляра</param>
        </member>
        <member name="M:Injectikus.DIInstanceCreationService.CreateInstance(System.Type)">
            <summary>
            Создать экземпляр типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, экземпляр которого нужно создать</param>
            <returns>Экземпляр типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.DIInstanceCreationService.CreateBuilder(System.Type)">
            <summary>
            Создать построитель экземпляров
            </summary>
            <param name="type">Тип, для которого нужно создать построитель</param>
            <returns>Построитель экземпляров для типа <paramref name="type"/></returns>
        </member>
        <member name="T:Injectikus.IBinder">
            <summary>
            Интерфейс объекта связывания. 
            Предоставляет интерфейс для удобного добавления объектов в контейнер.
            </summary>
        </member>
        <member name="P:Injectikus.IBinder.Type">
            <summary>Базовый тип</summary>
        </member>
        <member name="P:Injectikus.IBinder.Container">
            <summary>
            Контейнер, в котором осуществляется привязка
            </summary>
        </member>
        <member name="P:Injectikus.IBinder.DefaultProviderFactory">
            <summary>
            Фабрика поставщиков объектов по-умолчанию
            </summary>
        </member>
        <member name="M:Injectikus.IBinder.To(System.Type)">
            <summary>
            Выполнить привязку производного типа <paramref name="type"/> к базовому <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="type">Тип к которому осуществляется привязка базового типа</param>
        </member>
        <member name="M:Injectikus.IBinder.ToMethod(System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Выполнить привязку производящего метода к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="factoryMethod">Производящий метод</param>
        </member>
        <member name="M:Injectikus.IBinder.ToProvider(Injectikus.IObjectProvider)">
            <summary>
            Выполнить привязку произвольного поставщика к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="T:Injectikus.IBinder`1">
            <summary>
            Интерфейс объекта связывания. 
            Предоставляет интерфейс для удобного добавления объектов в контейнер.
            <typeparam name="TargetT">Базовый тип, к которому осуществляется привязка</typeparam>
            </summary>
        </member>
        <member name="M:Injectikus.IBinder`1.To``1">
            <summary>
            Выполнить привязку производного класса <typeparamref name="InstanceT"/> к базовому типу <typeparamref name="TargetT"/>
            </summary>
            <typeparam name="InstanceT">Класс производный от типа <typeparamref name="TargetT"/></typeparam>
        </member>
        <member name="M:Injectikus.IBinder`1.ToMethod``1(System.Func{Injectikus.IContainer,``0})">
            <summary>
            Выполнить привязку производящего метода <paramref name="factoryMethod"/> к базовому типу <typeparamref name="TargetT"/>
            </summary>
            <param name="factoryMethod">Производящий метод, возвращающий объект типа <typeparamref name="InstanceT"/></param>
            <typeparam name="InstanceT">Класс, производный от <typeparamref name="TargetT"/>, объекты которого возвращаются производящим методом</typeparam>
        </member>
        <member name="T:Injectikus.IBinderExtensions">
            <summary>
            Расширение интерфейса <see cref="T:Injectikus.IBinder"/>
            </summary>
        </member>
        <member name="M:Injectikus.IBinderExtensions.Singleton(Injectikus.IBinder)">
            <summary>
            Связать с объектом-одиночкой
            </summary>
            <param name="binder">Базовый объект-связывания</param>
            <returns>Объект связывания для экземпляров-одиночек</returns>
        </member>
        <member name="M:Injectikus.IBinderExtensions.Singleton``1(Injectikus.IBinder{``0})">
            <summary>
            Связать с объектом-одиночкой
            </summary>
            <typeparam name="TargetType">Базовый тип</typeparam>
            <param name="binder">Базовый объект-связывания</param>
            <returns>Объект связывания для экземпляров-одиночек с базовым типом <typeparamref name="TargetType"/></returns>
        </member>
        <member name="M:Injectikus.IBinderExtensions.Singleton``2(Injectikus.IBinder{``0},``1)">
            <summary>
            Связать с конкретным объектом-одиночкой <paramref name="instance"/>
            </summary>
            <typeparam name="TargetType">Базовый тип</typeparam>
            <typeparam name="InstanceT">Тип объекта-одиночки <paramref name="instance"/></typeparam>
            <param name="binder">Базовый объект-связывания</param>
            <param name="instance">Конкретный экземпляр-одиночка</param>
        </member>
        <member name="M:Injectikus.IBinderExtensions.Singleton(Injectikus.IBinder,System.Object)">
            <summary>
            Связать с конкретным объектом-одиночкой <paramref name="instance"/>
            </summary>
            <param name="binder">Базовый объект-связывания</param>
            <param name="instance">Конкретный экземпляр-одиночка</param>
        </member>
        <member name="M:Injectikus.IBinderExtensions.ToThemselves``1(Injectikus.IBinder{``0})">
            <summary>
            Связать тип <typeparamref name="TargetT"/> с самим собой
            </summary>
            <typeparam name="TargetT">Базовый тип</typeparam>
            <param name="binder">Объект связывания</param>
        </member>
        <member name="M:Injectikus.IBinderExtensions.ToThemselves(Injectikus.IBinder)">
            <summary>
            Связать тип с самим собой
            </summary>
            <param name="binder">Объект связывания</param>
        </member>
        <member name="T:Injectikus.IBinderFactory">
            <summary>
            Фабрика объектов связывания.
            </summary>
        </member>
        <member name="M:Injectikus.IBinderFactory.GetBinder(System.Type)">
            <summary>
            Получить объект связывание для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого нужно получить объект связывания</param>
            <returns>Объект связывание для типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.IBinderFactory.GetBinder``1">
            <summary>
            Получить объект связывание для типа <typeparamref name="TargetT"/>
            </summary>
            <typeparam name="TargetT">Тип, для которого нужно получить объект связывания</typeparam>
            <returns>Объект связывание для типа <typeparamref name="TargetT"/></returns>
        </member>
        <member name="T:Injectikus.IContainer">
            <summary>
            Базовый интерфейс контейнера инъекции зависимостей
            </summary>
        </member>
        <member name="P:Injectikus.IContainer.BinderFactory">
            <value>
            Фабрика объектов связывания
            <see cref="T:Injectikus.IBinderFactory"/>
            <seealso cref="T:Injectikus.IBinder"/>
            </value>
        </member>
        <member name="M:Injectikus.IContainer.BindProvider(System.Type,Injectikus.IObjectProvider)">
            <summary>
            Создаёт связь между типом <paramref name="type"/> и поставщиком объектов <paramref name="provider"/>
            </summary>
            <param name="type">Тип, с которым следует связать поставщика</param>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="M:Injectikus.IContainer.BindProvider``1(Injectikus.IObjectProvider)">
            <summary>
            Создаёт связь между типом <typeparamref name="TargetType"/> и поставщиком объектов <paramref name="provider"/>
            </summary>
            <typeparam name="TargetType">Тип, с которым следует связать поставщика</typeparam>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="M:Injectikus.IContainer.UnbindProvider(System.Type,Injectikus.IObjectProvider)">
            <summary>
            Удаляет связь между типом <paramref name="type"/> и поставщиком <paramref name="provider"/>
            </summary>
            <param name="type">Тип</param>
            <param name="provider">Ассоцированный с типом <paramref name="type"/> поставщик</param>
        </member>
        <member name="M:Injectikus.IContainer.UnbindProvider``1(Injectikus.IObjectProvider)">
            <summary>
            Удаляет связь между типом <typeparamref name="TargetType"/> и поставщиком <paramref name="provider"/>
            </summary>
            <typeparam name="TargetType">Тип</typeparam>
            <param name="provider">Ассоцированный с типом <typeparamref name="TargetType"/> поставщик</param>
        </member>
        <member name="M:Injectikus.IContainer.CanResolve``1(System.Boolean)">
            <summary>
            Проверяет, может ли контейнер разрешить зависимость <typeparamref name="TargetType"/>
            По умолчанию для любого типа массива результат true, если не задано <paramref name="strictArrayCheck"/>
            </summary>
            <typeparam name="TargetType">Тип, для которого выполняется проверка</typeparam>
            <param name="strictArrayCheck">Выполнять ли строгую проверку для массивов</param>
            <returns><c>true</c> если поставщик для типа <typeparamref name="TargetType"/> присутствует в контейнерею, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.IContainer.CanResolve(System.Type,System.Boolean)">
            <summary>
            Проверяет, может ли контейнер разрешить зависимость <paramref name="type"/>. 
            По умолчанию для любого типа массива результат true, если не задано <paramref name="strictArrayCheck"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка</param>
            <param name="strictArrayCheck">Выполнять ли строгую проверку для массивов</param>
            <returns><c>true</c> если поставщик для типа <paramref name="type"/> присутствует в контейнерею, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.IContainer.Get``1">
            <summary>
            Получить экземпляр типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Тип экземпляра</typeparam>
            <returns>Экземпляр типа <typeparamref name="TargetType"/></returns>
            <exception cref="T:System.ArgumentException">Объект типа <typeparamref name="TargetType"/> не найден в контейнере</exception>
        </member>
        <member name="M:Injectikus.IContainer.TryGet``1(``0@)">
            <summary>
            Попробовать получить экземпляр типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Требуемый тип</typeparam>
            <param name="obj">Переменная, через которую осуществляется возврат экземпляра</param>
            <returns><c>true</c> если удалось получить объект, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.IContainer.GetAll``1">
            <summary>
            Получить массив всех экземпляров типа <typeparamref name="TargetType"/> из контейнера
            </summary>
            <typeparam name="TargetType">Требуемый тип</typeparam>
            <returns>Массив <typeparamref name="TargetType"/>[]. 
            Если к контейнере остуствуют поставщики объектов для типа <typeparamref name="TargetType"/>,
            то будет возращен массив длины 0</returns>
        </member>
        <member name="M:Injectikus.IContainer.CreateInstance``1">
            <summary>
            Создаёт экземпляр класса <typeparamref name="TargetType"/>, внедряя в него зависимости по одной из доступных стратегий.
            При этом, для создания объекта не используются зарегестрированные провайдеры.
            Основное предназначение данного метода - создание экземпляров класса, не зарегистрированного в контейнере.
            </summary>
            <typeparam name="TargetType">Тип создаваемого экземпляра</typeparam>
            <returns>Экземпляр класса <typeparamref name="TargetType"/></returns>
        </member>
        <member name="M:Injectikus.IContainer.CreateInstance(System.Type)">
            <summary>
            Создаёт экземпляр класса <paramref name="type"/>, внедряя в него зависимости по одной из доступных стратегий.
            При этом, для создания объекта не используются зарегестрированные провайдеры.
            Основное предназначение данного метода - создание экземпляров класса, не зарегистрированного в контейнере.
            </summary>
            <param name="type">Тип создаваемого экземпляра</param>
            <returns>Экземпляр класса <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.IContainer.Get(System.Type)">
            <summary>
            Получить экземпляр типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Тип экземпляра</param>
            <returns>Экземпляр типа <paramref name="type"/></returns>
            <exception cref="T:System.ArgumentException">Объект типа <paramref name="type"/> не найден в контейнере</exception>
        </member>
        <member name="M:Injectikus.IContainer.TryGet(System.Type,System.Object@)">
            <summary>
            Попробовать получить экземпляр типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Требуемый тип</param>
            <param name="obj">Переменная, через которую осуществляется возврат экземпляра</param>
            <returns><c>true</c> если удалось получить объект, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.IContainer.GetAll(System.Type)">
            <summary>
            Получить массив всех экземпляров типа <paramref name="type"/> из контейнера
            </summary>
            <param name="type">Требуемый тип</param>
            <returns>Массив object[] с элементами типа <paramref name="type"/>. 
            Если к контейнере остуствуют поставщики объектов для типа <paramref name="type"/>,
            то будет возращен массив длины 0</returns>
        </member>
        <member name="T:Injectikus.IInstanceBuilder">
            <summary>
            Построитель экземпляров. Скрывает конкретную стратегию построения экземпляра.
            </summary>
        </member>
        <member name="M:Injectikus.IInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр
            </summary>
            <param name="container">Контейнер, в котором создаётся экземпляр</param>
            <returns>Экземпляр класса, с внедрёнными в него зависимостями</returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.ConstructorInjectionStrategy">
            <summary>
            Стратегия основанная на внедрении зависимостей через параметры конструктора
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.ConstructorInjectionStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            <value><c>true</c> - Данная стратегия требует наличия конструктора с атрибутом <see cref="T:Injectikus.InjectHereAttribute"/></value>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.ConstructorInjectionStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра,
            реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns><see cref="T:Injectikus.InstanceBuilders.InjectionConstructorInstanceBuilder"/></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.ConstructorInjectionStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если тип <paramref name="type"/> имеет открытые конструкторы, 
            помеченные аттрибутом <see cref="T:Injectikus.InjectHereAttribute"/> иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.DefaultConstructorStrategy">
            <summary>
            Стратегия создания объекта без внедрения завимостей
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.DefaultConstructorStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            <value><c>false</c> - Данная стратегия не основана на атрибутах</value>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.DefaultConstructorStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра, реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns><see cref="T:Injectikus.InstanceBuilders.DefaultConstructorInstanceBuilder"/></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.DefaultConstructorStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если тип <paramref name="type"/> имеет конструктор по-умолчанию, иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.InjectionMethodStrategy">
            <summary>
            Стратегия основанная на создании объекта с помощью конструктора по-умолчанию
            и внедрении зависимостей через аргументы отмеченного метода
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.InjectionMethodStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            <value><c>true</c> - Данная стратегия требует наличия метода с атрибутом <see cref="T:Injectikus.InjectHereAttribute"/></value>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.InjectionMethodStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра, реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns><see cref="T:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder"/></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.InjectionMethodStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если тип <paramref name="type"/> иммет отмеченный атрибутом <see cref="T:Injectikus.InjectHereAttribute"/> метод, иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.ObjectInitializationStrategy">
            <summary>
            Описывает стратегию инициализации экземпляра
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.ObjectInitializationStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.ObjectInitializationStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если стратегия применима, иначе <c>false</c></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.ObjectInitializationStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра, реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns>Построитель объекта</returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.PropertiesAndSettersInjectionStrategy">
            <summary>
            Стратегия, основанная на создании объекта с помощью конструктора по-умолчанию
            и внедрении зависимостей через свойства и сеттеры
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.PropertiesAndSettersInjectionStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            <value><c>true</c> - Данная стратегия требует наличия методов с атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            или свойств с атрибутом <see cref="T:Injectikus.InjectHereAttribute"/></value>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.PropertiesAndSettersInjectionStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра, реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns><see cref="T:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder"/></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.PropertiesAndSettersInjectionStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если тип <paramref name="type"/> иммет конструктор по-умолчанию и хотя бы один 
            отмеченный атрибутом <see cref="T:Injectikus.InjectHereAttribute"/> метод
            или отмеченное атрибутом <see cref="T:Injectikus.InjectHereAttribute"/> свойство, иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.InitializationStrategies.TypeAnalyzer">
            <summary>
            Класс-помошник в анализе типов
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.IsDefined``1(System.Reflection.MemberInfo)">
            <summary>
            Проверить, есть ли в члена класса атрибут <paramref name="member"/>
            </summary>
            <typeparam name="Attr">Атрибут</typeparam>
            <param name="member">Описание члена класса</param>
            <returns>Результат проверки</returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.IsMarkedConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Помечен ли конструктор атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetPublicConstructors(System.Type)">
            <summary>
            Возвращает массив публичных конструкторов
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetMarkedConstructors(System.Type)">
            <summary>
            Получить все конструкторы, отмеченные аттрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetPublicDefaultConstructor(System.Type)">
            <summary>
            Получить публичный конструктор по-умолчанию
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetPublicMethods(System.Type)">
            <summary>
            Получить публичные методы типа
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.IsMarkedSetter(System.Reflection.MethodInfo)">
            <summary>
            Помечен ли метод атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetMarkedSetters(System.Type)">
            <summary>
            Получить методы, помеченные атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetMarkedMethods(System.Type)">
            <summary>
            Получить методы, помеченные атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.IsMarkedMethod(System.Reflection.MethodInfo)">
            <summary>
            Помечен ли метод атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetPublicProperties(System.Type)">
            <summary>
            Получить все публичные свойства
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.IsMarkedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Помечен ли свойство атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetMarkedProperties(System.Type)">
            <summary>
            Получить свойства, помеченные атрибутом <see cref="T:Injectikus.InjectHereAttribute"/>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.GetUserDefinedInitializationMethod(System.Type)">
            <summary>
            Возвращает значение атрибута <see cref="T:Injectikus.InjectHereAttribute"/>, если такой присутствует у типа
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.TypeAnalyzer.HasArrayInjectionAttribute(System.Reflection.ParameterInfo)">
            <summary>
            Проверяет, помечено ли свойство атрибутом <see cref="T:Injectikus.InjectArrayAttribute"/>
            </summary>
        </member>
        <member name="T:Injectikus.InitializationStrategies.WidestConstructorStrategy">
            <summary>
            Стратегия основанная на использовании
            конструктора класса
            с наибольшим числом параметров, типы которых могут быть
            разрешены контейнером.
            </summary>
        </member>
        <member name="P:Injectikus.InitializationStrategies.WidestConstructorStrategy.IsAttributeBasedStrategy">
            <summary>
            Основана ли стратегии на аттрибутах 
            <value><c>false</c> - Данная стратегия не основана на атрибутах</value>
            </summary>
        </member>
        <member name="M:Injectikus.InitializationStrategies.WidestConstructorStrategy.CreateBuilderFor(System.Type)">
            <summary>
            Создаёт для типа <paramref name="type"/> новый построитель экземпляра, реализующий данную стратегию.
            </summary>
            <param name="type">Тип, для которого создаётся построитель</param>
            <returns><see cref="T:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder"/></returns>
        </member>
        <member name="M:Injectikus.InitializationStrategies.WidestConstructorStrategy.IsAcceptableFor(System.Type)">
            <summary>
            Применима ли данная стратегия для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого выполняется проверка применимости стратегии</param>
            <returns><c>true</c> если тип <paramref name="type"/> имеет хотя бы один конструктор 
            с ненулевым количеством параметров, иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.InstanceBuilders.DefaultConstructorInstanceBuilder">
            <summary>
            Фабрика объектов, использующая конструктор по-умолчанию
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.DefaultConstructorInstanceBuilder.constructor">
            <summary>
            Конструктор по-умолчанию объекта
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.DefaultConstructorInstanceBuilder.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Создать фабрику объектов, использующую конструктор по-умолчанию
            </summary>
            <param name="constructor">Конструктор по-умолчанию</param>
        </member>
        <member name="M:Injectikus.InstanceBuilders.DefaultConstructorInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр
            </summary>
            <param name="container">Контейнер, в котором создаётся экземпляр</param>
            <returns>Экземпляр объекта</returns>
        </member>
        <member name="T:Injectikus.InstanceBuilders.InjectionConstructorInstanceBuilder">
            <summary>
            Фабрика экземпляров, использующая конкретный конструктор объекта и осуществляющая внедрение зависимостей через его параметры
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.InjectionConstructorInstanceBuilder.constructor">
            <summary>
            Конструктор объекта
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InjectionConstructorInstanceBuilder.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Создать фабрику объектов
            </summary>
            <param name="constructor">Конструктор, в параметры которого необходимо внедрить зависимости</param>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InjectionConstructorInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр класса, используя внедрение зависимостей в один из его конструкторов
            </summary>
            <param name="container">Контейнер, в котором создаётся экземпляр</param>
            <returns>Экземпляр класса, с внедрёнными в него зависимостями</returns>
        </member>
        <member name="T:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder">
            <summary>
            Фабрика экземпляров, создающая их с помощью конструктора по-умолчанию 
            и внедряющая зависимости путём вызова определённого метода.
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder.constructor">
            <summary>
            Конструктор по-умолчанию
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder.method">
            <summary>
            Метод, через который внедряются зависимости
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder.#ctor(System.Reflection.ConstructorInfo,System.Reflection.MethodInfo)">
            <summary>
            Создать фабрику
            </summary>
            <param name="constructor">Конструктор по-умолчанию</param>
            <param name="method">Метод, через который внедряются зависимости</param>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InjectionMethodInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр класса, используя конструктор по-умолчанию и внедрение зависимостей с помощью одного из его методов
            </summary>
            <param name="container">Контейнер, в котором создаётся экземпляр</param>
            <returns>Экземпляр класса, с внедрёнными в него зависимостями</returns>
        </member>
        <member name="T:Injectikus.InstanceBuilders.InstanceCreationHelper">
            <summary>
            Помощник в создании экземпляров класса
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InstanceCreationHelper.GetMethodDependencies(System.Reflection.MethodBase,Injectikus.IContainer)">
            <summary>
            Получить зависимости метода <paramref name="method"/> разрешенные контейнером <paramref name="container"/>
            </summary>
            <param name="method">Метод, для параметров которого необходимо разрешить зависимости</param>
            <param name="container">Контейнер, который будет разрешать зависимости</param>
            <returns>Массив в с разрешёнными зависимостями</returns>
        </member>
        <member name="M:Injectikus.InstanceBuilders.InstanceCreationHelper.GetPropertyDependency(System.Reflection.PropertyInfo,Injectikus.IContainer)">
            <summary>
            Получить зависимости свойства <paramref name="property"/> разрешенные контейнером <paramref name="container"/>
            </summary>
            <param name="property">Свойство, для которого необходимо разрешить зависимости</param>
            <param name="container">Контейнер, который будет разрешать зависимости</param>
            <returns>Объект, разрешающий зависимость</returns>
        </member>
        <member name="T:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder">
            <summary>
            Фабрика экземпляров, создающая их с использованием конструктора по-умолчанию
            и внедрение зависимостей через свойства и сеттеры.
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder.constructor">
            <summary>
            Конструктор по-умолчанию
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder.setters">
            <summary>
            Список сеттеров для внедрения зависимостей
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder.properties">
            <summary>
            Список свойств для внедрения зависимостей
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder.#ctor(System.Reflection.ConstructorInfo,System.Reflection.MethodInfo[],System.Reflection.PropertyInfo[])">
            <summary>
            Создать фабрику объектов
            </summary>
            <param name="constructor">Конструктор по-умолчанию</param>
            <param name="setters">Список сеттеров для внедрения зависимостей</param>
            <param name="properties">Список свойств для внедрения зависимостей</param>
        </member>
        <member name="M:Injectikus.InstanceBuilders.PropertiesAndSettersInjectionInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр класса, используя конструктор по-умолчанию 
            и внедрение зависимостей через его свойства и сеттеры.
            </summary>
            <param name="container"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder">
            <summary>
            Фабрика экземпляров, использующая конструктор класса
            с наибольшим числом параметров, типы которых могут быть
            разрешены контейнером.
            Поиск подхлдящего конструктора осуществляется каждый раз, когда вызывается метод <see cref="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.BuildInstance(Injectikus.IContainer)"/>
            </summary>
        </member>
        <member name="F:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.#ctor(System.Type)">
            <summary>
            Создать фабрику
            </summary>
            <param name="type">Тип создаваемого объекта</param>
        </member>
        <member name="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.BuildInstance(Injectikus.IContainer)">
            <summary>
            Создать экземпляр типа <see cref="F:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.type"/>.
            Используя "широчайший" из конструкторов с разрешимыми контейнером параметрами.
            </summary>
            <param name="container">Контейнер, в котором создаётся экземпляр</param>
            <returns>Экземпляр класса, с внедрёнными в него зависимостями</returns>
        </member>
        <member name="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.GetConstructorWeight(System.Reflection.ConstructorInfo)">
            <summary>Получить вес конструктора</summary>
            <param name="info">Описание конструктора</param>
            <returns>Неотрицательное число - сумма весов параметров конструктора</returns>
        </member>
        <member name="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.GetParameterWeight(System.Reflection.ParameterInfo)">
            <summary>Получить вес параметра</summary>
            <param name="p">Описание параметра</param>
            <returns>Неотрицательное число - вес параметра</returns>
        </member>
        <member name="M:Injectikus.InstanceBuilders.WidestConstructorInstanceBuilder.CheckConstructorTypes(System.Reflection.ConstructorInfo,Injectikus.IContainer)">
            <summary>
            Проверить, могут ли параметры конструктора быть разрешены контейнером
            </summary>
            <param name="info">Описание конструктора</param>
            <param name="container">Контейнер, который будет разрешать зависимости конструктора</param>
            <returns><c>true</c> - если параметры конструктора могут быть разрешены контейнером <paramref name="container"/>, иначе <c>false</c></returns>
        </member>
        <member name="T:Injectikus.IObjectProvider">
            <summary>
            Поставщик объектов - описывает алгоритм построения нового объекта для контейнера внедрения зависимостей
            </summary>
        </member>
        <member name="P:Injectikus.IObjectProvider.Type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.IObjectProvider.Create(Injectikus.IContainer)">
            <summary>
            Создаёт объект типа <see cref="P:Injectikus.IObjectProvider.Type"/>
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Объект типа <see cref="P:Injectikus.IObjectProvider.Type"/></returns>
        </member>
        <member name="T:Injectikus.ObjectProvider`1">
            <summary>
            Базовый класс для реализаций интерфейса <see cref="T:Injectikus.IObjectProvider"/>
            </summary>
            <typeparam name="InstanceType">Тип возвращаемого поставщиком объекта</typeparam>
        </member>
        <member name="P:Injectikus.ObjectProvider`1.Type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.ObjectProvider`1.Create(Injectikus.IContainer)">
            <summary>
            Создаёт объект типа <see cref="P:Injectikus.IObjectProvider.Type"/>
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Объект типа <see cref="P:Injectikus.IObjectProvider.Type"/></returns>
        </member>
        <member name="M:Injectikus.ObjectProvider`1.CreateInstance(Injectikus.IContainer)">
            <summary>
            Фабричный метод создания экземпляра типа <typeparamref name="InstanceType"/>
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Экземпляр типа <typeparamref name="InstanceType"/></returns>
        </member>
        <member name="T:Injectikus.IProviderFactory">
            <summary>
            Фабрика поставщиков обектов для стандартных ситуаций
            </summary>
        </member>
        <member name="M:Injectikus.IProviderFactory.GetFactoryMethodProvider(System.Type,System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Получить поставщиков объектов для фабричного метода
            </summary>
            <param name="type">Тип, для которого нужно создать поставщик</param>
            <param name="factoryMethod">Фабричный метод</param>
        </member>
        <member name="M:Injectikus.IProviderFactory.GetClassInstanceProvider(System.Type)">
            <summary>
            Получить поставщик объектов для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого необходимо создать поставщик объектов</param>
        </member>
        <member name="T:Injectikus.Providers.ClassInstanceProvider">
            <summary>
            Поставщик объектов, создающий объекты по объекту их типа
            </summary>
        </member>
        <member name="P:Injectikus.Providers.ClassInstanceProvider.Type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.Providers.ClassInstanceProvider.#ctor(System.Type)">
            <summary>
            Создать новый поставщик
            </summary>
            <param name="type">Тип создаваемого поставщиком объекта</param>
        </member>
        <member name="M:Injectikus.Providers.ClassInstanceProvider.Create(Injectikus.IContainer)">
            <summary>
            Создать экземпляр типа <see cref="P:Injectikus.Providers.ClassInstanceProvider.Type"/>
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Объект типа <see cref="P:Injectikus.Providers.ClassInstanceProvider.Type"/></returns>
        </member>
        <member name="T:Injectikus.Providers.FactoryMethodProvider">
            <summary>
            Поставщик объектов, создающий их с помощью заданного производящего делегата
            </summary>
        </member>
        <member name="F:Injectikus.Providers.FactoryMethodProvider.method">
            <summary>
            Производящий делегат
            </summary>
        </member>
        <member name="P:Injectikus.Providers.FactoryMethodProvider.Type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.Providers.FactoryMethodProvider.#ctor(System.Type,System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Создать новый поставщик объектов типа <paramref name="type"/>, создающий их с помощью производящего делегата <paramref name="method"/>
            </summary>
            <param name="type">Тип создаваемого объекта</param>
            <param name="method">Производящий делегат</param>
        </member>
        <member name="M:Injectikus.Providers.FactoryMethodProvider.Create(Injectikus.IContainer)">
            <summary>
            Создать объект
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Экземпляр типа <see cref="P:Injectikus.Providers.FactoryMethodProvider.Type"/></returns>
        </member>
        <member name="T:Injectikus.Providers.SingletonObjectProvider">
            <summary>
            Поставщик объектов-одиночек. Обёртка над другим поставщиком, реализующая паттерн Singleton.
            </summary>
        </member>
        <member name="F:Injectikus.Providers.SingletonObjectProvider.provider">
            <summary>
            Базовый поставщик объектов
            </summary>
        </member>
        <member name="F:Injectikus.Providers.SingletonObjectProvider.instance">
            <summary>
            Экземпляр-одиночка 
            </summary>
        </member>
        <member name="P:Injectikus.Providers.SingletonObjectProvider.Type">
            <summary>
            Тип создаваемого объекта
            </summary>
        </member>
        <member name="M:Injectikus.Providers.SingletonObjectProvider.#ctor(Injectikus.IObjectProvider)">
            <summary>
            Создаёт поставщик объектов-одиночек, оборачивая базовый поставщик <paramref name="provider"/>
            </summary>
            <param name="provider">Базовый поставщик объектов</param>
        </member>
        <member name="M:Injectikus.Providers.SingletonObjectProvider.#ctor(System.Object)">
            <summary>
            Создаёт поставщик заданного в <paramref name="instance"/> объекта-одиночки 
            </summary>
            <param name="instance">Объект-одиночка</param>
        </member>
        <member name="M:Injectikus.Providers.SingletonObjectProvider.Create(Injectikus.IContainer)">
            <summary>
            Получить объект-одиночку типа <see cref="P:Injectikus.IObjectProvider.Type"/>
            </summary>
            <param name="container">Контейнер внедрения зависимостей, используемый для создания объекта</param>
            <returns>Экземпляр-одиночка типа <see cref="P:Injectikus.Providers.FactoryMethodProvider.Type"/></returns>
        </member>
        <member name="T:Injectikus.Providers.SingletonProviderFactory">
            <summary>
            Фабрика поставщиков объектов-одиночек.
            </summary>
        </member>
        <member name="F:Injectikus.Providers.SingletonProviderFactory.baseFactory">
            <summary>
            Базавая фабрика поставщиков объектов.
            </summary>
        </member>
        <member name="M:Injectikus.Providers.SingletonProviderFactory.#ctor(Injectikus.IProviderFactory)">
            <summary>
            Конструктор фабрики поставщиков экземпляров-одиночек
            </summary>
            <param name="baseFactory">Базовая фабрика поставщиков обектов</param>
        </member>
        <member name="M:Injectikus.Providers.SingletonProviderFactory.GetClassInstanceProvider(System.Type)">
            <summary>
            Создаёт поставщик экземпляра-одиночки типа <paramref name="type"/>
            </summary>
            <param name="type">Тип экземпляра-одиночки</param>
            <returns>Поставщик экземпляра-одиночки типа <paramref name="type"/></returns>
        </member>
        <member name="M:Injectikus.Providers.SingletonProviderFactory.GetFactoryMethodProvider(System.Type,System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Создаёт поставщик экземпляра-одиночки типа <paramref name="type"/> с помощью метода-поставщика <paramref name="method"/>
            </summary>
            <param name="type">Тип экземпляра</param>
            <param name="method">Метод-поставщик объектов</param>
            <returns>Поставщик экземпляра-одиночки типа <paramref name="type"/></returns>
        </member>
        <member name="T:Injectikus.DefaultProviderFactory">
            <summary>
            Фабрика поставщиков обектов по-умолчанию.
            </summary>
        </member>
        <member name="M:Injectikus.DefaultProviderFactory.GetClassInstanceProvider(System.Type)">
            <summary>
            Получить поставщик объектов для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип, для которого необходимо создать поставщик объектов</param>
        </member>
        <member name="M:Injectikus.DefaultProviderFactory.GetFactoryMethodProvider(System.Type,System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Получить поставщиков объектов для фабричного метода.
            </summary>
            <param name="type">Тип, для которого нужно создать поставщик</param>
            <param name="factoryMethod">Фабричный метод</param>
        </member>
        <member name="T:Injectikus.SingletonBinder">
            <summary>
            Объект связывания для объектов-одиночек.
            Представляет собой фасад над другими объектами-свзявыния,
            оборачивая полученные от них поставщики объектов в <see cref="T:Injectikus.Providers.SingletonObjectProvider"/>
            и привязывая полученные поставщики их с помощью <see cref="M:Injectikus.IBinder.ToProvider(Injectikus.IObjectProvider)"/> 
            обёрнутого объекта-связывания.
            </summary>
        </member>
        <member name="F:Injectikus.SingletonBinder.binder">
            <summary>
            Оборачиваемый объект-связывания
            </summary>
        </member>
        <member name="P:Injectikus.SingletonBinder.Type">
            <summary>Базовый тип</summary>
        </member>
        <member name="P:Injectikus.SingletonBinder.Container">
            <summary>
            Контейнер, в котором осуществляется привязка
            </summary>
        </member>
        <member name="P:Injectikus.SingletonBinder.DefaultProviderFactory">
            <summary>
            Фабрика поставщиков объектов по-умолчанию
            </summary>
        </member>
        <member name="M:Injectikus.SingletonBinder.#ctor(Injectikus.IBinder)">
            <summary>
            Создаёт объект связывания одиночек
            </summary>
            <param name="baseBinder">Оборачиваемый объект-связывания</param>
        </member>
        <member name="M:Injectikus.SingletonBinder.To(System.Type)">
            <summary>
            Выполнить привязку производного типа <paramref name="type"/> к базовому <see cref="P:Injectikus.IBinder.Type"/>,
            для которого в контейнере будет создан только один экземпляр.
            </summary>
            <param name="type">Тип к которому осуществляется привязка базового типа</param>
        </member>
        <member name="M:Injectikus.SingletonBinder.ToMethod(System.Func{Injectikus.IContainer,System.Object})">
            <summary>
            Выполнить привязку производящего метода к базовому типу <see cref="P:Injectikus.IBinder.Type"/>.
            В контейнере будет создан только один экземпляр этого типа.
            </summary>
            <param name="factoryMethod">Производящий метод</param>
        </member>
        <member name="M:Injectikus.SingletonBinder.ToObject(System.Object)">
            <summary>
            Выполнить привязку конкретного объекта к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Injectikus.SingletonBinder.ToProvider(Injectikus.IObjectProvider)">
            <summary>
            Выполнить привязку произвольного поставщика к базовому типу <see cref="P:Injectikus.IBinder.Type"/>
            В контейнере будет создан только один экземпляр этого типа.
            </summary>
            <param name="provider">Поставщик объектов</param>
        </member>
        <member name="T:Injectikus.SingletonBinder`1">
            <summary>
            Параметризованный объект связывания для объектов-одиночек.
            Представляет собой фасад над другими параметризованными объектами-свзявыния,
            оборачивая полученные от них поставщики объектов в <see cref="T:Injectikus.Providers.SingletonObjectProvider"/>
            и привязывая полученные поставщики их с помощью <see cref="M:Injectikus.IBinder.ToProvider(Injectikus.IObjectProvider)"/> 
            обёрнутого объекта-связывания.
            </summary>
            <typeparam name="TargetT">Базовый тип</typeparam>
        </member>
        <member name="F:Injectikus.SingletonBinder`1.binder">
            <summary>
            Оборачиваемый параметризованный объект-связывания
            </summary>
        </member>
        <member name="M:Injectikus.SingletonBinder`1.#ctor(Injectikus.IBinder{`0})">
            <summary>
            Создаёт новы параметризованный объект связывание одиночек
            </summary>
            <param name="binder"></param>
        </member>
        <member name="M:Injectikus.SingletonBinder`1.To``1">
            <summary>
            Выполнить привязку производного типа <typeparamref name="InstanceT"/> к базовому <typeparamref name="TargetT"/>
            для которого в контейнере будет создан только один экземпляр.
            </summary>
            <typeparam name="InstanceT">Тип к которому осуществляется привязка базового типа</typeparam>
        </member>
        <member name="M:Injectikus.SingletonBinder`1.ToMethod``1(System.Func{Injectikus.IContainer,``0})">
            <summary>
            Выполнить привязку производящего метода к базовому типу <typeparamref name="TargetT"/>.
            В контейнере будет создан только один экземпляр этого типа.
            </summary>
            <typeparam name="InstanceT">Тип к которому осуществляется привязка базового типа</typeparam>
            <param name="factoryMethod">Производящий метод</param>
        </member>
    </members>
</doc>
